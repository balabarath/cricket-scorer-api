/*
 * This file is generated by jOOQ.
*/
package cricketScorer.db.gen.tables;


import cricketScorer.db.gen.Indexes;
import cricketScorer.db.gen.Public;
import cricketScorer.db.gen.tables.records.GameRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Game extends TableImpl<GameRecord> {

    private static final long serialVersionUID = -1017974216;

    /**
     * The reference instance of <code>public.GAME</code>
     */
    public static final Game GAME = new Game();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GameRecord> getRecordType() {
        return GameRecord.class;
    }

    /**
     * The column <code>public.GAME.ID</code>.
     */
    public final TableField<GameRecord, UUID> ID = createField("ID", org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.GAME.TEAM1</code>.
     */
    public final TableField<GameRecord, String> TEAM1 = createField("TEAM1", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>public.GAME.TEAM2</code>.
     */
    public final TableField<GameRecord, String> TEAM2 = createField("TEAM2", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>public.GAME.GAME_START_TIME</code>.
     */
    public final TableField<GameRecord, Timestamp> GAME_START_TIME = createField("GAME_START_TIME", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.GAME.GAME_TYPE</code>.
     */
    public final TableField<GameRecord, String> GAME_TYPE = createField("GAME_TYPE", org.jooq.impl.SQLDataType.CHAR(10), this, "");

    /**
     * Create a <code>public.GAME</code> table reference
     */
    public Game() {
        this(DSL.name("GAME"), null);
    }

    /**
     * Create an aliased <code>public.GAME</code> table reference
     */
    public Game(String alias) {
        this(DSL.name(alias), GAME);
    }

    /**
     * Create an aliased <code>public.GAME</code> table reference
     */
    public Game(Name alias) {
        this(alias, GAME);
    }

    private Game(Name alias, Table<GameRecord> aliased) {
        this(alias, aliased, null);
    }

    private Game(Name alias, Table<GameRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CONSTRAINT_INDEX_2, Indexes.CONSTRAINT_INDEX_21, Indexes.PRIMARY_KEY_21);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Game as(String alias) {
        return new Game(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Game as(Name alias) {
        return new Game(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Game rename(String name) {
        return new Game(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Game rename(Name name) {
        return new Game(name, null);
    }
}
